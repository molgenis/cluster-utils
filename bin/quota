#!/bin/bash
# shellcheck disable=SC2004,SC2059

#
# Script to report quota for user and his groups on several dirs from shared/network storage.
#

#
##
### Environment and bash sanity.
##
#
if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
  echo "Sorry, you need at least bash 4.x to use ${0}." >&2
  exit 1
fi
set -u
set -e
set -o pipefail
umask 0027
SCRIPT_NAME="$(basename "${0}")"

#
# Set ${TMPDIR} to /tmp, which is usually on localhost.
# Prevents not being able to check quota, because quota were exceeded on one of our large TMP file systems.
#
export TMPDIR='/tmp/'

#
# Make sure dots are used as decimal separator.
#
export LC_ALL='en_US.UTF-8'

#
# Trap all exit signals: HUP(1), INT(2), QUIT(3), TERM(15), ERR
#
trap 'reportError $LINENO' HUP INT QUIT TERM EXIT ERR

#
##
### Functions.
##
#
function showHelp() {
  #
  # Display commandline help on STDOUT.
  #
  cat <<EOH
===============================================================================================================
 Lists quota status for the current user and its groups (default).

 Usage:

   ${SCRIPT_NAME} OPTIONS

OPTIONS:

   -a   List quota for all groups instead of only for the groups the user executing this script is a member of 
        (root user only).
   -p   Plain text output: Disables coloring and other formatting using shell escape codes. 
        Useful when redirecting the output to a log file.
   -n   Normalize units and always report in tebibytes (TiB | T).

Details:

   The report will show 11 columns:
   
    1 Quota type = one of:
       (U) = user quota
       (P) = (private) group quota: group with only one user and mostly used for home dirs.
       (G) = (regular) group quota: group with multiple users.
       (F) = folder a.k.a. file set a.k.a. directory a.k.a. project quota: limits the size of a folder 
             irrespective of the user and group attributes of the files stored in that folder.
    2 Path/Filesystem = (part of) a storage system controlled by the quota settings listed.
    3 used   = total amount of disk space your data consumes.
    4 quota  = soft limit for space.
    5 limit  = hard limit for space.
    6 grace  = days left before the timer for space quota expires.
    7 used   = total number of files and folders your data consists of.
    8 quota  = the soft limit for the number of files and folder.
    9 limit  = the hard limit for the number of files and folders.
   10 grace  = days left before the timer for the number of files and folders quota expires.
   11 status = whether you exceed your quota or not.
   
   Grace is the time you can temporarily exceed the quota (soft limit) up to max the hard limit.
   When there is no grace time left the soft limit will temporarily become a hard limit 
   until the amount of used resources drops below the quota, which will reset the timer.
   Grace is 'none'
    * when the quota (soft) limit has not been exceeded or
    * when the quota (soft) limit has been exceeded and there is no grace time left or
    * when the hard limit has been exceeded.
   Grace is reported as remaining time when the quota (soft) limit has been exceeded, 
   but the hard limit has not been reached yet and the grace timer has not yet expired.
   
   Values are always reported with a dot as the decimal separator (LC_NUMERIC="en_US.UTF-8").
===============================================================================================================

EOH
  #
  # Reset trap and exit.
  #
  trap - EXIT
  exit 0
}

function reportError() {
  local PROBLEMATIC_LINE="${1}"
  local exit_status="${2:-$?}"
  local ERROR_MESSAGE="Unknown error."
  local errorMessage="${3:-"${ERROR_MESSAGE}"}"
  echo "
${HOSTNAME} - ${SCRIPT_NAME}:${PROBLEMATIC_LINE}: FATAL: quota reporting FAILED!
${HOSTNAME} - ${SCRIPT_NAME}:${PROBLEMATIC_LINE}: Exit code = ${exit_status}
${HOSTNAME} - ${SCRIPT_NAME}:${PROBLEMATIC_LINE}: Error message = ${errorMessage}
"
  #
  # Reset trap and exit.
  #
  trap - EXIT
  exit "${exit_status}"
}

#
# GPFS has dedicated quota tools with output that deviates from the normal quota reporting.
# This function parses the mmlsquota (GPFS) output with some site specific hacks 
# and formats the result using printf with a format as specified by the ${format} variable.
#
function getFileSetQuotaForGPFS() {
  #
  # GPFS example file set quota.
  #
  #                          Block Limits                                    |     File Limits
  # Filesystem type             GB      quota      limit   in_doubt    grace |    files   quota    limit in_doubt    grace  Remarks
  # scratch    FILESET       36517      51200      51200          1     none |  1048947       0        0      301     none target02.local
  #
  local _group="${1}"
  local _fs_name="${_group}" # fileset_name used for mmlsquota commandline tool
  shift 1
  declare -a _file_systems=("${@}")
  local _fs
  local _QUOTA='/usr/lpp/mmfs/bin/mmlsquota'
  local _BSIZE='1'
  local _BUNIT='G'
  local _size_used=2
  local _size_quota=3
  local _size_limit=4
  local _size_in_doubt=5
  local _size_grace=6
  local _files_used=8
  local _files_quota=9
  local _files_limit=10
  local _files_in_doubt=11
  local _files_grace=12
  local _lfs=''
  local _fs_path='' # fileset_path used for reporting to users.
  
  for _fs in "${_file_systems[@]+"${_file_systems[@]}"}"; do
    _fs="${_fs/\/dev\//}"
    if [[ ${_fs} == 'gpfs2' ]]; then
      _lfs='tmp02'
    else 
      reportError "${LINENO}" "${?}" 'Unknown GPFS detected. Request admin to update quota reporting!'
      #
      # Handle exceptions in paths, file set names, etc.
      #
    fi
    if [[ "${_group}" == "${DEPLOY_ADMIN_GROUP}" ]]; then
      _fs_path="/.envsync/${_lfs}"
    else
      _fs_path="/groups/${_group}/${_lfs}"
    fi
    local _fileset_quota
    _fileset_quota="$("${_QUOTA}" -j "${_fs_name}" "${_fs}" --block-size "${_BSIZE}${_BUNIT}" 2> /dev/null | tail -n 1)" \
        || reportError "${LINENO}" "${?}"
    IFS=' ' read -r -a _body_values <<< "${_fileset_quota}" || reportError "${LINENO}" "${?}"
    if [[ -n "${_body_values[0]:-}" && "${#_body_values[@]}" -eq 14 ]]; then
      #
      # Reformat GiB -> TiB if BUNIT was 'G'.
      #
      for offset in {${_size_used},${_size_quota},${_size_limit}}; do
        if [[ "${_body_values[${offset}]}" -gt 1024 ]]; then
          #echo "DEBUG: larger than 1024: ${_body_values[${offset}]}"
          local _divided_by_1024
          _divided_by_1024="$(echo "scale=1; ${_body_values[${offset}]}/1024" | bc)"
          _body_values["${offset}"]=$(printf "%'.1fT" "${_divided_by_1024}")
        else
          _body_values["${offset}"]="${_body_values["${offset}"]}G"
        fi
      done
      #
      # Declare quota values array and display values.
      #
      declare -a _quota_values=("${_fs_path}" 
                 "${_body_values[${_size_used}]}" "${_body_values[${_size_quota}]}" "${_body_values[${_size_limit}]}" "${_body_values[${_size_grace}]}" 
                 "${_body_values[${_files_used}]}" "${_body_values[${_files_quota}]}" "${_body_values[${_files_limit}]}" "${_body_values[${_files_grace}]}")
      printQuota 'F' "${_quota_values[@]}"
    fi
  done
}

#
# Lustre and BeeGFS file systems have their own quota tools.
# Isilon OneFS NFS mounts are even wierder.
# This function can parse group / directory quota for these file systems and report them in a uniform format.
#
function getGroupQuota() {
  local _group="${1}"
  local _fs_type="${2}"
  shift 2
  declare -a _file_systems=("${@}")
  local _fs
  #
  # Loop over mounts and look for Logical File Systems (LFS-ses).
  #
  #echo "DEBUG: _group = ${_group} and _fs_type = ${_fs_type}"
  #echo "DEBUG: _file_systems = ${_file_systems[@]:-}"
  for _fs in "${_file_systems[@]+"${_file_systems[@]}"}"; do
    #
    # Initialize defaults.
    #
    local _fs_for_report='NA'
    local _quota_type='G'
    local _lfs
    #echo "DEBUG: processing _fs = ${_fs} of type ${_fs_type}."
    #
    # Handle exceptions in paths, group names, etc.
    #
    if [[ "${_group}" == "${DEPLOY_ADMIN_GROUP}" ]]; then
      #
      # Deploy Admins (depad) group uses specific LFS-ses.
      #
      if [[ "${_fs}" == '/apps'* ]]; then
        #
        # We are dealing with a (bind) mount of the shared software environment
        # from a sub folder of a complete File System.
        #
        # shellcheck disable=SC2269
        _fs="${_fs}"
      elif [[ "${_fs}" == '/mnt/env'* ]]; then
        #
        # We are dealing with a (bind) mount of a secondary copy of the shared software environment
        # from a sub folder of a complete File System.
        # E.g. /mnt/env[0-9]+/apps
        #
        _fs="${_fs}/apps"
      elif [[ -d "${_fs}/apps" ]]; then
        #
        # We are dealing with a complete FS, which contains a primary apps folder.
        # E.g. /mnt/umcgst[0-9]+/apps
        #
        _fs="${_fs}/apps"
        #echo "DEBUG: ${_fs}"
      else
        #
        # Look for secondary copies of the primary apps folder on a complete FS.
        #
        if [[ "${_fs}" == '/mnt/'* ]] && find "${_fs}" -mindepth 2 -maxdepth 2 -type d -path "${_fs}"'/env[0-9]*/apps' | grep -q "."; then
          _fs=$(find "${_fs}" -mindepth 2 -maxdepth 2 -type d -path "${_fs}"'/env[0-9]*/apps')
        else
          #
          # We did not find any LFS-ses for the depad group.
          #
          continue
        fi
      fi
    elif [[ "${_group}" == "${MY_USER}" ]] || id "${_group}" >/dev/null 2>&1; then
      #
      # We are dealing with a user's private group, which is only used
      # for their home dir on LFS /home.
      #
      _quota_type='P' # default for home dirs.
      _lfs='home'
      if [[ -d "${_fs}/home/${_group}" ]]; then
        #
        # Found user's home dir on a complete FS.
        # E.g. /mnt/umcgst[0-9]+/home/${MY_USER}
        #
        _fs="${_fs}/home"
        _fs_for_report="${_fs}/${_group}"
      elif [[ "${_fs}" == '/home' && -d "${_fs}/${_group}" ]]; then
        #
        # Found user's home dir on a (bind) mount from a sub folder of a complete File System.
        # E.g. /home/${MY_USER}
        #
        _fs_for_report="${_fs}/${_group}"
      else
        #
        # We did not find any LFS-ses for a user's private group / home dir.
        #
        continue
      fi
    else
      #
      # Regular groups only use /groups/... LFS-ses.
      #
      if [[ "${_fs}" == "/groups/${_group}/"* ]]; then
        # We are dealing with a main group on a (bind) mount from a sub folder of a complete File System.
        _lfs="${_fs/*\//}"
        _fs_for_report="/groups/${_group}/${_lfs}"
      elif [[ -e "${_fs}/groups/${_group}" ]]; then
        # We are dealing with a main group on a complete FS.
        _fs=$(find "${_fs}/groups/${_group}" -mindepth 1 -maxdepth 1 -type d)
        _lfs="${_fs/*\//}"
      else
        # This should not happen: we don't know how to fetch quota for this group.
        continue
      fi
      #echo "DEBUG _fs ${_fs} | _lfs ${_lfs} | _fs_for_report ${_fs_for_report}"
    fi
    if [[ "${_fs_for_report}" == 'NA' ]]; then
      _fs_for_report="${_fs}"
    fi
    if [[ "${_fs_type}" == 'beegfs' ]]; then
      #
      # BeeGFS has dedicated quota tools with output that deviates from the normal quota reporting.
      # This function parses the beegfs-ctl --getquota output with some site specific hacks 
      # and formats the result using printf with a format as specified by the ${format} variable.
      #
      # WARNING: Currently limited to one BeeGFS per server!
      #          When a server has multiple beegfs mounts, we cannot distingish between the mounts 
      #          as the beegfs-ctl tool does not report which mount the values apply too :o.
      #
      # BeeGFS quota examples.
      #
      # $~> beegfs-ctl --getquota --gid umcg-depad
      #       user/group     ||           size          ||    chunk files    
      #      name     |  id  ||    used    |    hard    ||  used   |  hard   
      # --------------|------||------------|------------||---------|---------
      #     umcg-depad|55100128||    8.27 GiB|   unlimited||     1286|unlimited
      #
      # $~> beegfs-ctl --getquota --csv --gid umcg-depad
      # name,id,size,hard,files,hard
      # umcg-depad,55100128,165144313856,unlimited,1346,unlimited
      #
      local _offset_size_used=2
      local _offset_size_limit=3
      local _offset_files_used=4
      local _offset_files_limit=5
      local _fs_quota
      _fs_quota="$(beegfs-ctl --getquota --csv --gid "${_group}" 2> /dev/null | tail -n 1)"  || reportError "${LINENO}" "${?}"
      IFS=',' read -r -a _body_values  <<< "${_fs_quota}"                                    || reportError "${LINENO}" "${?}"
      if [[ -n "${_body_values[0]:-}" && "${#_body_values[@]}" -eq 6 ]]; then
        declare -a _quota_values=("${_fs_for_report}" 
                   "${_body_values[${_offset_size_used}]}"  'NA' "${_body_values[${_offset_size_limit}]}"  'none' 
                   "${_body_values[${_offset_files_used}]}" 'NA' "${_body_values[${_offset_files_limit}]}" 'none')
        printQuota "${_quota_type}" "${_quota_values[@]}"
      else
        echo "ERROR: Cannot parse quota values returned by beegfs-ctl --getquota --csv --gid ${_group}"
        continue
      fi
    elif [[ "${_fs_type}" == 'lustre' ]]; then
      #
      # LustreFS has dedicated quota tools with output that deviates from the normal quota reporting.
      # This function parses the lfs quota output with some site specific hacks 
      # and formats the result using printf with a format as specified by the ${format} variable.
      #
      # lfs quota examples.
      #
      # $> lfs quota -h -g umcg-gaf /groups/umcg-gaf/tmp04
      # Disk quotas for group umcg-gaf (gid 55100132):
      #      Filesystem    used   quota   limit   grace   files   quota   limit   grace
      # /groups/umcg-gaf/tmp04
      #                  23.09T*    15T     20T       -  334110       0       0       -
      #
      # $> lfs quota -h -g umcg-pneerincx /home
      # Disk quotas for group umcg-pneerincx (gid 50100292):
      #      Filesystem    used   quota   limit   grace   files   quota   limit   grace
      #           /home  356.4M      1G      2G       -    7159       0       0       -
      #
      local _offset_size_used=1
      local _offset_size_quota=2
      local _offset_size_limit=3
      local _offset_size_grace=4
      local _offset_files_used=5
      local _offset_files_quota=6
      local _offset_files_limit=7
      local _offset_files_grace=8
      local _fs_quota
      #
      # Use project quota for this lfs if configured or default to group quota.
      #
      #echo "DEBUG: checking for ${_fs_for_report}/.quotacache"
      if [[ -e "${_fs_for_report}/.quotacache" ]]; then
        if [[ -r "${_fs_for_report}/.quotacache" ]]; then
          local _pid
          if grep -q 'project_id=' "${_fs_for_report}/.quotacache"; then
            _pid=$(grep 'project_id=' "${_fs_for_report}/.quotacache" | sed 's/project_id=//')
            #echo "DEBUG: _lfs = ${_lfs} and _pid = ${_pid}."
            if [[ "${_lfs}" == 'home' ]]; then
              _fs="${_fs}/${_group}"
            fi
            _quota_type='F'
            _fs_quota="$(lfs quota -q -h -p "${_pid}" "${_fs}" 2> /dev/null | grep -A1 "${_fs}" | grep -v 'is using default' | tr -d '\n')" || reportError "${LINENO}" "${?}"
          else
            echo "ERROR: Cannot parse project_id from ${_fs_for_report}/.quotacache"
            continue
          fi
        else
          echo "ERROR: Cannot read ${_fs_for_report}/.quotacache"
          continue
        fi
      else
        _fs_quota="$(lfs quota -q -h -g "${_group}" "${_fs}" 2> /dev/null | grep -A1 "${_fs}" | grep -v 'is using default' | tr -d '\n')" || reportError "${LINENO}" "${?}"
      fi
      IFS=' ' read -r -a _body_values <<< "${_fs_quota}" || reportError "${LINENO}" "${?}"
      if [[ -n "${_body_values[0]:-}" && "${#_body_values[@]}" -eq 9 ]]; then
        declare -a _quota_values=("${_fs_for_report}" 
                   "${_body_values[${_offset_size_used}]}"  "${_body_values[${_offset_size_quota}]}"  "${_body_values[${_offset_size_limit}]}"  "${_body_values[${_offset_size_grace}]}" 
                   "${_body_values[${_offset_files_used}]}" "${_body_values[${_offset_files_quota}]}" "${_body_values[${_offset_files_limit}]}" "${_body_values[${_offset_files_grace}]}")
        printQuota "${_quota_type}" "${_quota_values[@]}"
      else
        echo "ERROR: Cannot parse quota values returned by lfs quota -q -h -g ${_group} ${_fs}"
        continue
      fi
    elif [[ "${_fs_type}" == 'nfs4' ]]; then
      #
      # Isilon OneFS has no dedicated quota tools nor does it work with the regular NFS quota tools: bummer.
      # It does have a "--container=true" option for directory quota.
      # This option will make the file system size reported by the "df" command on a client equal to the hard quota limit.
      # There is no way to query the soft limit nor to query the grace period on the client using "df".
      # Therefore we make a few assumptions:
      #  1. nfs4 mounts come from an Isilon OneFS
      #  2. nfs4 mounts use directory quota with "--container=true" option
      #  3. soft limit: we expect this to be configured according the following rules relative to the hard limit.
      #      * soft limit is in the same unit as the hard limit: e.g. if the hard limit is in GB the soft limit is too.
      #      * soft limit is at least 1 and hard limit is at least 2.
      #      * hard limit is ~10% extra compared to the soft limit rounded to the nearest next integer.
      #
      # Isilon OneFS NFS share "df" output example for directory quota.
      #
      # $> df -T -k /home/user/
      # Filesystem                                                    Type 1K-blocks   Used Available Use% Mounted on
      # gcc-storage001.stor.hpc.local:/ifs/rekencluster/umcgst10/home nfs4   2097152 936960   1160192  45% /home
      #
      # $> df -T -i /home/user/
      # Filesystem                                                    Type  Inodes   IUsed   IFree IUse% Mounted on
      # gcc-storage001.stor.hpc.local:/ifs/rekencluster/umcgst10/home nfs4 4194304 1875184 2319120   45% /home
      #
      if [[ ! -e "${_fs_for_report}" ]]; then
        #
        # It's a sub group without it's own specific dir/path: we cannot fetch directory quota for sub groups.
        #
        continue
      fi
      local _offset_size_used='3'
      local _offset_size_limit='2'
      local _offset_files_used='3'
      local _offset_files_limit='2'
      local _directory_bsize_quota
      local _directory_inode_quota
      _directory_bsize_quota="$(df -T -k "${_fs_for_report}" 2> /dev/null | tail -n 1)" || reportError "${LINENO}" "${?}"
      _directory_inode_quota="$(df -T -i "${_fs_for_report}" 2> /dev/null | tail -n 1)" || reportError "${LINENO}" "${?}"
      IFS=' ' read -r -a _bsize_values <<< "${_directory_bsize_quota}" || reportError "${LINENO}" "${?}"
      IFS=' ' read -r -a _inode_values <<< "${_directory_inode_quota}" || reportError "${LINENO}" "${?}"
      if [[ -n "${_bsize_values[0]:-}" && "${#_bsize_values[@]}" -eq 7 && -n "${_inode_values[0]:-}" && "${#_inode_values[@]}" -eq 7 ]]; then
        #
        # Define default values not reported by df.
        #
        local _size_quota='?'
        local _size_grace='?'
        local _files_quota='?'
        local _files_grace='?'
        #
        # Check if missing values can be supplemented from a .quotacache file.
        #
        if [[ -r "${_fs_for_report}/.quotacache" ]]; then
          if grep -q 'size_soft_limit=' "${_fs_for_report}/.quotacache"; then
            _size_quota="$(grep 'size_soft_limit=' "${_fs_for_report}/.quotacache" | sed 's/size_soft_limit=//')G"
          fi
        fi
        #
        # Declare quota values array and display values.
        #
        declare -a _quota_values=("${_fs_for_report}" 
                   "${_bsize_values[${_offset_size_used}]}k" "${_size_quota}" "${_bsize_values[${_offset_size_limit}]}k" "${_size_grace}" 
                   "${_inode_values[${_offset_files_used}]}" "${_files_quota}" "${_inode_values[${_offset_files_limit}]}" "${_files_grace}")
        printQuota 'F' "${_quota_values[@]}"
      else
        echo "ERROR: Cannot parse quota values returned by df -T [-k|-i] ${_fs_for_report}"
        continue
      fi
    else
      echo "ERROR: unsupported file system type: ${_fs_type}."
      return
    fi
  done
}

#
# This function parses a single line of plain vanilla Linux quota tools output
# and formats the result using printf with a format as specified by the ${format} variable.
#
function parseAndFormatRegularQuota() {
  local _quota_type="$1"
  local _quota_report_line="$2"
  #
  # Parse string into array.
  #
  IFS=' ' read -r -a _quota_values <<< "${_quota_report_line}" || reportError "${LINENO}" "${?}"
  #
  # Check for missing and wrong grace values.
  #
  local _regex='[0-9]{5}days'
  if [[ "${_quota_values[1]}" =~ \* ]]; then # Check for size (bytes) quota
    #
    # Fix grace reporting bug when grace has expired.
    # (Bug will result in ridiculous high grace value starting at 49697days and counting down.)
    #
    if [[ "${_quota_values[4]}" =~ ${_regex} ]]; then
      _quota_values[4]='0days'
    fi
  else
    #
    # The quota (soft) limit was not exceeded and a grace value is missing / not reported.
    # Insert 'none' to prevent shifting values.
    #
    _quota_values=("${_quota_values[@]:0:4}" 'none' "${_quota_values[@]:4}")
  fi
  if [[ "${_quota_values[5]}" =~ \* ]]; then # Check for files (inodes) quota
    #
    # Fix grace reporting bug when grace has expired.
    # (Bug will result in ridiculous high grace value starting at 49697days and counting down.)
    #
    
    if [[ "${_quota_values[8]}" =~ ${_regex} ]]; then
      _quota_values[8]='0days'
    fi
  else
    #
    # The quota (soft) limit was not exceeded and a grace value is missing / not reported.
    # Insert 'none' to prevent shifting values.
    #
    _quota_values=("${_quota_values[@]}" 'none')
  fi
  printQuota "${_quota_type}" "${_quota_values[@]}"
}

#
# Polish quota values for pretty printing and print.
#
function printQuota() {
  local _status='Ok' # default.
  local _quota_type="${1}"
  shift
  declare -a _quota_values=("${@}")
  #echo "DEBUG _quota_values[0]: ${_quota_values[0]}"
  #
  # Check and append status.
  #
  #   Set status to Ok and switch to quota EXCEEDED when: 
  #    * either the consumed resource values are suffixed with and asterisk (*)
  #    * or the consumed resource values exceed the quota (soft limit) values.
  #    * or the timer was triggered and the grace value is not 'none'.
  #
  local _regex='\?'
  if [[ "${_quota_values[2]}" =~ ${_regex} ]]; then
    _status='?'
  fi
  _regex='\*$'
  for offset in {1,5}; do
    #echo "DEBUG _quota_values ${offset}: ${_quota_values[${offset}]}"
    if [[ "${_quota_values[${offset}]}" =~ ${_regex} ]]; then
      _status="${QUOTA_EXCEEDED_WARNING}"
    fi
    #if [[ ${_quota_values[${offset}]} -gt ${_quota_values[${offset}+1]} ]]; then
    #  _status="${QUOTA_EXCEEDED_WARNING}"
    #fi
  done
  for offset in {4,8}; do
    if [[ "${_quota_values[${offset}]}" == '-' ]]; then
      _quota_values[${offset}]='none'
    fi
    _quota_values[${offset}]=${_quota_values[${offset}]/day/ day}
    if [[ "${_quota_values[${offset}]}" != 'none' && "${_quota_values[${offset}]}" != '?' ]]; then
      _status="${QUOTA_EXCEEDED_WARNING}"
    fi
  done
  #
  # Reformat quota values and units: keeping resolution using different units.
  #
  for offset in {1,2,3,5,6,7}; do
    _quota_values[${offset}]="$(set -e; reformatQuota "${_quota_values[${offset}]}")"
  done
  #
  # Optionally normalize data on the same unit (T).
  #
  if [[ "${NORMALIZE_QUOTA}" -eq 1 ]]; then
    for offset in {1,2,3}; do
      _quota_values[${offset}]="$(set -e; convert2TiB "${_quota_values[${offset}]}")"
    done
  fi
  printf "${format}" "${_quota_type}" "${_quota_values[@]}" "${_status}"
}

#
# Reformat quota values and units: keeping resolution using different units.
#  * Convert large numbers without unit into kilo unit.
#  * Standardise on a space between value and unit.
#
function reformatQuota() {
  local _quota_value="${1}"
  local _regex='^([0-9.,][0-9.,]*)([kMGTP]?)'
  declare -A _unit2factors=(['k']='1' ['M']='2' ['G']='3' ['T']='4' ['P']='5')
  declare -A _factors2unit=(['1']='k' ['2']='M' ['3']='G' ['4']='T' ['5']='P')
  local _factor
  #echo "DEBUG: _quota_value ${_quota_value}" >&2
  if [[ "${_quota_value}" =~ ${_regex} ]]; then
    local _number="${BASH_REMATCH[1]}"
    local _unit="${BASH_REMATCH[2]}"
    #echo "DEBUG: _number ${_number} and _unit ${_unit}" >&2
    _number="${_number//,/}" # Remove all ',' thousand separators, which bc does not like.
    local _int="${_number%.*}"
    if [[ -z "${_unit:-}" ]]; then
      _factor='0'
    else
      _factor="${_unit2factors["${_unit}"]}"
    fi
    while [[ "${#_int}" -gt 5 ]]; do
      _number="$(echo "${_number}/1024" | bc -l)"
      _factor="$((${_factor}+1))"
      _int="${_number%.*}"
    done
    printf -v _formatted_number "%'.1f" "${_number}"
    if [[ "${_factor}" -eq 0 ]]; then
      _quota_value="${_formatted_number}  "  # Add padding for missing unit.
    else
      _quota_value="${_formatted_number} ${_factors2unit[${_factor}]}"
    fi
  elif [[ "${_quota_value}" == '?' ]]; then
    _quota_value="${_quota_value}  "  # Add padding for missing unit.
  fi
  printf '%s' "${_quota_value}"
}

#
# Reformat quota values and units by normalizing data on the same unit T (TiB, tebibyte).
#
function convert2TiB () {
  local _value="${1}"
  local _regex='^([0-9.,][0-9.,]*) ([kMG])'
  local _base=1024
  local _exp=4
  local _divide=1
  local _computed_value
  declare -A _factors=(['k']=1 ['M']=2 ['G']=3)
  if [[ "${_value}" =~ ${_regex} ]]; then
      local _number="${BASH_REMATCH[1]}"
      local _unit="${BASH_REMATCH[2]}"
      if [[ -n "${_unit:-}" ]]; then
        _exp=$((${_exp} - ${_factors[${_unit}]}))
      fi
      _divide=$((${_base} ** ${_exp}))
      _number="${_number//,/}" # Remove all ',' thousand separators, which bc does not like.
      _computed_value="$(echo "scale=1; ${_number}/${_divide}" | bc)"
      printf "%'.1f T" "${_computed_value}"
  else
    #
    # Return input "as is".
    #
    printf '%s' "${_value}"
  fi
}

#
##
### Variables.
##
#

#
# Check were we are running this script.
#
MY_DIR=$( cd -P "$( dirname "$0" )" && pwd )
#
# Get the name of the user executing this script.
#
MY_USER="$(id -un)"
#
# Special group used to rsync copies of deployed software 
# and reference data sets to various HP filesystems.
#
DEPLOY_ADMIN_GROUP='umcg-depad'
#
# Known sub-groups that share a group folder on a file system, but have their own quota settings.
#
declare -a SUB_GROUPS=('umcg-gonl-rar1' 'umcg-gonl-rar2' 'umcg-gonl-rar3' 'umcg-gonl-rar4')
#
# Get list of groups the user executing this script is a member of.
#  * Remove a (private) group with the same name as MY_USER from the list if present.
#  * Remove DEPLOY_ADMIN_GROUP is present.
#
id_result="$(id -Gn \
  | sed "s/${MY_USER} //" \
  | sed "s/ ${DEPLOY_ADMIN_GROUP}//" \
  | tr ' ' '\n' \
  | sort )"
readarray -t MY_GROUPS <<< "${id_result}"

#
# Choose customised quota binary and associated first column length.
#
QUOTA="${MY_DIR}/quota-30-left"
#
# Formatting constants.
#
first_column_prefix_width=14 #default
base_width=121
SEP_SINGLE_CHAR='-'
SEP_DOUBLE_CHAR='='

#
##
### Main.
##
#

#
# Get commandline arguments.
#
ALL_GROUPS=0
PLAIN_TEXT=0
NORMALIZE_QUOTA=0
while getopts ":hnap" opt; do
  case "${opt}" in
    h)
      showHelp
      ;;
    n)
      NORMALIZE_QUOTA=1
      ;;
    a)
      ALL_GROUPS=1
      ;;
    p)
      PLAIN_TEXT=1
      ;;
    \?)
      reportError "${LINENO}" '1' "Invalid option -${OPTARG}. Try \"${SCRIPT_NAME} -h\" for help."
      ;;
    :)
      reportError "${LINENO}" '1' "Option -${OPTARG} requires an argument. Try \"${SCRIPT_NAME} -h\" for help."
      ;;
    *)
      reportError "${LINENO}" '1' "Invalid argument \"-${OPTARG}\". Try \"${SCRIPT_NAME} -h\" for help."
      ;;
  esac
done

#
# Check if we are root if data was requested for all groups.
#
if [[ "${ALL_GROUPS}" -eq 1 ]]; then
  if [[ "${MY_USER}" != 'root' ]]; then
    reportError "${LINENO}" 1 "Requesting quota info for all groups/users is only available to root and you are ${MY_USER}."
  fi
fi

#
# Create list of groups for which to report quota status.
#
declare -a QUOTA_GROUPS
if [[ "${ALL_GROUPS}" -eq 1 ]]; then
  if [[ -d /groups/ ]]; then
    find_result="$(find /groups/ -maxdepth 1 -mindepth 1 -type d | sed 's|/.*/||' | sort)"
    readarray -t group_folders_on_this_server <<< "${find_result}"
    # /groups/ + ( /tmp0* || prm0* || scr0* || arc0*) = 14 long.
    first_column_prefix_width=14
  else
    find_result="$(find /mnt/*/groups/ -maxdepth 1 -mindepth 1 -type d | sed 's|/.*/||' | sort)"
    readarray -t group_folders_on_this_server <<< "${find_result}"
    # /mnt/umcgst0*/groups/ + ( /tmp0* || prm0* || scr0* || arc0*) = 27 long.
    first_column_prefix_width=27
  fi
  combined_groups=$(printf '%s\n' \
      "${MY_GROUPS[@]}" \
      "${group_folders_on_this_server[@]}" \
      "${SUB_GROUPS[@]}" \
      | sort -u)
  readarray -t QUOTA_GROUPS <<< "${combined_groups}"
  QUOTA_GROUPS=("${DEPLOY_ADMIN_GROUP}" "${QUOTA_GROUPS[@]}")
else
  QUOTA_GROUPS=("${MY_GROUPS[@]:-}")
  #
  # If MY_USER is a member of the DEPLOY_ADMIN_GROUP move that one to the top of the list.
  #
  id_result="$(id -Gn)"
  if [[ "${id_result}" =~ ${DEPLOY_ADMIN_GROUP} ]]; then
    QUOTA_GROUPS=("${DEPLOY_ADMIN_GROUP}" "${QUOTA_GROUPS[@]}")
  fi
fi
#echo "DEBUG: QUOTA_GROUPS=${QUOTA_GROUPS[@]}"

#
# Create list of private user groups for which to report quota status.
#
declare -a QUOTA_PRIVATE_GROUPS
if [[ "${ALL_GROUPS}" -eq 1 ]]; then
  #
  # Search for homes in /mnt/*/home/..."
  #
  home_folders_on_this_server="$(find /mnt/*/home/ -maxdepth 1 -mindepth 1 -type d | sed 's|/.*/||' | sort)"
  if [[ -z "${home_folders_on_this_server:-}" ]]; then
    #
    # Search for homes in /home/..."
    #
    home_folders_on_this_server="$(find /home/ -maxdepth 1 -mindepth 1 -type d | sed 's|/.*/||' | sort)"
  fi
  combined_users="$(printf '%s\n' \
      "${MY_USER:-}" \
      "${home_folders_on_this_server:-}" \
      | sort -u)"
  readarray -t QUOTA_PRIVATE_GROUPS <<< "${combined_users}"
else
  QUOTA_PRIVATE_GROUPS=("${MY_USER:-}")
fi

#
# Compute length of longest group name to adjust layout.
#
longest_group_length=$(echo "${QUOTA_GROUPS[*]} ${QUOTA_PRIVATE_GROUPS[*]}" | \
    tr ' ' '\n' | \
    wc -L)
first_column_width=$((${first_column_prefix_width}+${longest_group_length}))
total_width=$((4+${first_column_width}+${base_width}))
format="(%1s) %-${first_column_width}b | %10s  %10s  %10s  %15s | %10s  %10s  %10s  %15s | %9b\n"
format_hh="    %-${first_column_width}s | %51s | %51s |\n"
SEP_SINGLE=$(head -c "${total_width}" /dev/zero | tr '\0' "${SEP_SINGLE_CHAR}")
SEP_DOUBLE=$(head -c "${total_width}" /dev/zero | tr '\0' "${SEP_DOUBLE_CHAR}")

#
# Configure warning messages with or without additional formatting.
#
if [[ "${PLAIN_TEXT}" -eq 1 ]]; then
  QUOTA_EXCEEDED_WARNING='EXCEEDED!'
else
  QUOTA_EXCEEDED_WARNING='\e[5mEXCEEDED!\e[25m'
fi

#
# List file systems of certain types.
#
readarray -t lustre_file_systems< <(awk -v fs_type=lustre '$3 == fs_type {print $2}' /proc/mounts | sort)
readarray -t beegfs_file_systems< <(awk -v fs_type=beegfs '$3 == fs_type {print $2}' /proc/mounts | sort)
readarray -t nfs4_file_systems< <(awk -v fs_type=nfs4 '$3 == fs_type {print $2}' /proc/mounts | sort)
readarray -t gpfs_file_systems< <(awk -v fs_type=gpfs '$3 == fs_type {print $2}' /proc/mounts | sort)

#
# Display header.
#
quota_report_header_header=$(printf "${format_hh}" '' 'Total size of files and folders' 'Total number of files and folders')
quota_report_header=$(printf "${format}" 'T' 'Path/Filesystem' 'used' 'quota' 'limit' 'grace' 'used' 'quota' 'limit' 'grace' 'Status')
echo "${SEP_DOUBLE}"
echo "${quota_report_header_header}"
echo "${quota_report_header}"

#
# Display relevant regular user quota.
# 
# Only used
#  * for some systems 
#  * mostly for local file systems 
#  * under control of the "standard" Linux quota tools.
#
set +e
trap - ERR
user_quota="$("${QUOTA}" -sQwA -u --show-mntpoint --hide-device 2> /dev/null)"
trap 'reportError $LINENO' ERR
set -e
quota_user_report=$(echo "${user_quota}" | tail -n+3 | sort -u)
if [[ -n ${quota_user_report:-} ]]; then
  echo "${SEP_SINGLE}"
  IFS_BAK="${IFS}"
  IFS=$'\n'
  for quota_report_line in ${quota_user_report}; do
    parseAndFormatRegularQuota 'U' "${quota_report_line}"
  done
  IFS="${IFS_BAK}"
fi

#
# Display relevant goofy "user" quota for home dirs.
# 
for THIS_PRIVATE_GROUP in "${QUOTA_PRIVATE_GROUPS[@]}"
do
  #echo "DEBUG: THIS_PRIVATE_GROUP = ${THIS_PRIVATE_GROUP}"
  #
  # For home dirs from shared Lustre systems:
  #  * for a user's "private group" with a group name that is the same as the user name.
  #  * under control of the Lustre quota tool: lfs quota ....
  #
  quota_private_group_report=$(set -e; getGroupQuota "${THIS_PRIVATE_GROUP}" 'lustre' "${lustre_file_systems[@]+"${lustre_file_systems[@]}"}")
  if [[ -n "${quota_private_group_report:-}" ]]; then
    echo "${SEP_SINGLE}"
    echo "${quota_private_group_report}"
  fi
  #
  # For home dirs from shared Isilon OneFS systems:
  #  * for a user's "private group" with a group name that is the same as the user name.
  #  * not controlled by normal nor dedicated quota command; values can partially be retrieved using df ....
  #
  quota_private_group_report=$(set -e; getGroupQuota "${THIS_PRIVATE_GROUP}" 'nfs4' "${nfs4_file_systems[@]+"${nfs4_file_systems[@]}"}")
  if [[ -n "${quota_private_group_report:-}" ]]; then
    echo "${SEP_SINGLE}"
    echo "${quota_private_group_report}"
  fi
done

#
# Display relevant group quota.
# 
# Only used
#  * for group dirs from shared GPFS, Lustre, BeeGFS or Isilon OneFS file systems 
#  * under control of
#     * either the Lustre quota tool (lfs quota)
#     * or GPFS quota tool (mmlsquota)
#     * or BeeGFS quota tool (beegfs-ctl)
#     * or no quota tool, but partially retrievable using df for Isilon OneFS.
#
for THIS_GROUP in "${QUOTA_GROUPS[@]:-}"
do
  quota_group_report_lustre=$(set -e; getGroupQuota "${THIS_GROUP}" 'lustre' "${lustre_file_systems[@]+"${lustre_file_systems[@]}"}")
  quota_group_report_beegfs=$(set -e; getGroupQuota "${THIS_GROUP}" 'beegfs' "${beegfs_file_systems[@]+"${beegfs_file_systems[@]}"}")
  quota_group_report_onefs=$(set -e; getGroupQuota "${THIS_GROUP}" 'nfs4' "${nfs4_file_systems[@]+"${nfs4_file_systems[@]}"}")
  quota_fileset_report=$(set -e; getFileSetQuotaForGPFS "${THIS_GROUP}" "${gpfs_file_systems[@]+"${gpfs_file_systems[@]}"}")
  if [[ -n "${quota_group_report_lustre:-}" ||
        -n "${quota_group_report_beegfs:-}" ||
        -n "${quota_group_report_onefs:-}" ||
        -n "${quota_fileset_report:-}" ]]; then
    echo "${SEP_SINGLE}"
  fi
  if [[ -n "${quota_group_report_lustre:-}" ]]; then
    echo "${quota_group_report_lustre}"
  fi
  if [[ -n "${quota_group_report_beegfs:-}" ]]; then
    echo "${quota_group_report_beegfs}"
  fi
  if [[ -n "${quota_group_report_onefs:-}" ]]; then
    echo "${quota_group_report_onefs}"
  fi
  if [[ -n "${quota_fileset_report:-}" ]]; then
    echo "${quota_fileset_report}"
  fi
done
echo "${SEP_DOUBLE}"

#
# Reset trap and exit.
#
trap - EXIT
exit 0
